{
  "name": "Resumefrombreakpoint",
  "tagline": "Swift实现断点续传,Demo简单易懂,没有太多复杂模块和逻辑,完整体现断点续传的原理",
  "body": "# ResumeFromBreakPoint\r\n<p>Swift实现断点续传,Demo简单易懂,没有太多复杂模块和逻辑,完整体现断点续传的原理<p>\r\n<p>https://github.com/whde/BreakPoint 为对应的Objective-C版本<p>\r\n```objective-c\r\n/*Objective-C*/\r\npod 'BreakPoint', '~> 1.0.1'\r\n```\r\n## WhdeBreakPoint\r\n简单的网络请求队列管理类,简单的管理,不做太多复杂处理\r\n```objective-c\r\n/*创建请求,添加请求到数组中\r\nWhdeSession请求失败,取消请求等需要从数组中移除*/\r\nstatic func asynDownload(urlStr:NSString, progress:ProgressBlock, success:SuccessBlock, failure:FailureBlock) ->WhdeSession\r\n```\r\n```objective-c\r\n/*取消请求,移除数组中对应的请求*/\r\nstatic func cancel(urlStr:String)\r\n```\r\n```objective-c\r\n/*暂停,即为取消请求*/\r\nstatic func pause(urlStr:String)\r\n```\r\n\r\n## WhdeFileManager\r\n断点续传专用的文件管理\r\n```objective-c\r\n/*根据NSURL获取存储的路径,文件不一定存在\r\n文件名为Url base64转换*/\r\nstatic func filePath(url:NSURL) -> String\r\n```\r\n```objective-c\r\n/*获取对应文件的大小*/\r\nstatic func fileSize(url:NSURL) -> UInt64\r\n```\r\n```objective-c\r\n/*根据url删除对应的文件*/\r\nstatic func deleteFile(url:NSURL) ->Bool\r\n```\r\n## WhdeSession\r\n网络收发\r\n```objective-c\r\n/*创建请求,开始下载,设置已经下载的位置*/\r\nfunc asynDownload(urlStr:NSString, progress:ProgressBlock, success:SuccessBlock, failure:FailureBlock, callCancel:CallCancel) ->WhdeSession \r\n```\r\n```objective-c\r\n/*取消下载*/\r\nfunc cancel() -> Void\r\n```\r\n```objective-c\r\n/*暂停下载即为取消下载*/\r\nfunc pause() -> Void \r\n```\r\n```objective-c\r\n/*出现错误,取消请求,通知失败*/\r\ninternal func URLSession(session: NSURLSession, didBecomeInvalidWithError error: NSError?)\r\n```\r\n```objective-c\r\n/*下载完成*/\r\ninternal func URLSession(session: NSURLSession, task: NSURLSessionTask, didCompleteWithError error: NSError?)\r\n```\r\n```objective-c\r\n/*接收到数据,将数据存储*/\r\ninternal func URLSession(session: NSURLSession, dataTask: NSURLSessionDataTask, didReceiveData data: NSData) {\r\nlet response:NSHTTPURLResponse = dataTask.response as! NSHTTPURLResponse\r\nif response.statusCode == 200 {\r\n/*无断点续传时候,一直走200*/\r\nself.progressBlock!(progress:(Float.init(dataTask.countOfBytesReceived)/Float.init(dataTask.countOfBytesExpectedToReceive)), receiveByte: dataTask.countOfBytesReceived, allByte: dataTask.countOfBytesExpectedToReceive)\r\nself.save(data)\r\n} else if response.statusCode == 206 {\r\n/*断点续传后,一直走206*/\r\nself.progressBlock!(progress:((Float.init(dataTask.countOfBytesReceived+Int64.init(startFileSize))/Float.init(dataTask.countOfBytesExpectedToReceive+Int64.init(startFileSize)))), receiveByte: dataTask.countOfBytesReceived, allByte: dataTask.countOfBytesExpectedToReceive);\r\nself.save(data)\r\n}\r\n}\r\n```\r\n```objective-c\r\n/*存储数据,将offset标到文件末尾,在末尾写入数据,最后关闭文件*/\r\nfunc save(data:NSData) -> Void\r\n```\r\n# 使用\r\n```objective-c\r\nvar urlStr: String?=\"http://dlsw.baidu.com/sw-search-sp/soft/2a/25677/QQ_V4.1.1.1456905733.dmg\"\r\n/*开始下载\r\n继续下载*/\r\n@IBAction func start(sender: AnyObject) {\r\n\r\nWhdeBreakPoint.asynDownload(urlStr!, progress: { (progress, receiveByte, allByte) in\r\nself.progressView.progress = progress\r\nself.progressLabel.text = \"\\(Int.init(progress*100))%\"\r\n}, success: { (filePath) in\r\nprint(\"success:\"+(filePath as String))\r\n}) { (filePath) in\r\nprint(\"success:\"+(filePath as String))\r\n}\r\n}\r\n\r\n/*根据Url暂停*/\r\n@IBAction func pause(sender: AnyObject) {\r\nWhdeBreakPoint.pause(urlStr!)\r\n}\r\n/*根据Url去删除文件*/\r\n@IBAction func deleteFile(sender: AnyObject) {\r\nWhdeFileManager.deleteFile(NSURL.init(string: urlStr!)!)\r\n}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}